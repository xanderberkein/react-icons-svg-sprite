import { cancel, intro, isCancel, outro, select, text } from "@clack/prompts";
import { generate } from "./generate";
import { rootDir, writeFiles } from "./util";
import path from "node:path";
import { glob } from "glob";

// remix
// -> remix-app-server -> sprite.svg needs to be in `public` folder for it to work
//    Icon needs to import from relative path
// -> cloudflare -> sprite.svg can be anywhere

// next
// -> pages directory -> needs to be in the public folder too

// does Icon also needs to be put in `.react-icons-svg-sprite`? href might need to be static or dynamic

// vite
// -> doesn't work by default, needs an import instead of a require?
// also put it in public by default?


export async function init() {
  intro(`react-icons-svg-sprite init`);

  // check if we don't find a sprite.svg file yet
  const existingSprite = await glob("**/sprite.svg", {
    ignore: ["node_modules"],
  });

  if (existingSprite.length) {
    cancel(
      `sprite.svg already exists in your project at ${existingSprite[0]}. To generate the types, run \`npx react-icons generate\` instead.`,
    );
    process.exit(0);
  }

  // check if we don't find a icons.config.js file
  const existingConfig = await glob("**/icons.config.js", {
    ignore: ["node_modules"],
  });

  if (existingConfig.length) {
    cancel(
      `react-icons-svg-sprite already initialized. Found config file at ${existingConfig[0]}.`,
    );
    process.exit(0);
  }

  const spritePath = await text({
    message: "Where would you like to create your sprite.svg file?",
    placeholder: "./assets",
    defaultValue: "./assets",
    validate(value) {
      if (value.endsWith(".svg") && !value.endsWith("sprites.svg"))
        return `Your svg sprite file will to be called sprite.svg. You can change this later with a config file`;
    },
  });

  const projectType = await select({
    message: "TypeScript or JavaScript?",
    options: [
      { value: "ts", label: "TypeScript" },
      { value: "js", label: "JavaScript" },
    ],
  });
  const isTypescript = projectType === "ts";

  console.log(
    "|  You can always change this later by running `npx react-icons init` again",
  );

  let typesPath;
  let typesFile;
  if (isTypescript) {
    typesPath = await text({
      message: "Where would you like to create your types file?",
      placeholder: "./types",
      defaultValue: "./types",
      validate(value) {
        if (
          value.endsWith(".ts") &&
          !value.endsWith("sprite.ts") &&
          !value.endsWith("sprite.d.ts") &&
          !value.endsWith("sprite.types.ts")
        )
          return `Your types file needs to be called sprite.types.ts, sprite.ts or sprite.d.ts. You can change this later with a config file`;
      },
    });

    if (typesPath.toString().endsWith(".ts")) {
      typesFile = typesPath.toString();
    } else {
      typesFile = `${typesPath.toString()}/sprite.types.ts`;
    }
  }

  if (isCancel(typesPath) || isCancel(spritePath) || isCancel(projectType)) {
    cancel("Cancelled.");
    process.exit(0);
  }

  const emptyType = `// This file is auto-generated by react-icons-svg-sprite. Manual modifications will be lost.

export type IconName = never;`;

  const svgLines = [
    `<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" data-ts="${
      projectType === "ts"
    }">`,
    `<defs>`,
    `</defs>`,
    `</svg>`,
  ];
  const emptySvg = svgLines.join("\n");

  const typePath = isTypescript
    ? path.join(rootDir, typesFile || "")
    : undefined;

  await writeFiles({
    type: emptyType,
    svg: emptySvg,
    typePath: isTypescript ? path.join(rootDir, typesFile || "") : undefined,
    spritePath: spritePath.endsWith(`svg`)
      ? path.join(rootDir, spritePath)
      : path.join(rootDir, spritePath, "sprite.svg"),
  });

  outro(
    `All done! Created ${spritePath}${typePath ? ` and ${typePath}` : ""}.`,
  );
}
